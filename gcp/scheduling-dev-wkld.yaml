apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: scheduling-dev-wkld
  labels:
    cni: calico
    scheduler: tas
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
        - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: scheduling-dev-wkld-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: GCPCluster
    name: scheduling-dev-wkld
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: GCPCluster
metadata:
  name: scheduling-dev-wkld
  namespace: default
spec:
  network:
    name: default
  project: k8s-ecoqube-development
  region: europe-west6
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: scheduling-dev-wkld-control-plane
  namespace: default
spec:
  kubeadmConfigSpec:
    files:
      - path: /etc/kubernetes/schedulerconfig/scheduler-componentconfig.yaml
        content: |
          apiVersion: kubescheduler.config.k8s.io/v1
          kind: KubeSchedulerConfiguration
          clientConnection:
            kubeconfig: /etc/kubernetes/scheduler.conf
          extenders:
            - urlPrefix: "https://tas-service.default.svc.cluster.local:9001"
              prioritizeVerb: "scheduler/prioritize"
              filterVerb: "scheduler/filter"
              weight: 1
              enableHTTPS: true
              managedResources:
                - name: "telemetry/scheduling"
                  ignoredByScheduler: true
              ignorable: true
              tlsConfig:
                insecure: false
                certFile: "/host/certs/client.crt"
                keyFile: "/host/certs/client.key"
      - path: /tmp/kubeadm/patches/kube-scheduler+json.json
        content: |-
          [
              {
                  "op": "add",
                  "path": "/spec/dnsPolicy",
                  "value": "ClusterFirstWithHostNet"
              }
          ]
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: gce
        timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          allocate-node-cidrs: "false"
          cloud-provider: gce
      scheduler:
        extraArgs:
          config: "/etc/kubernetes/schedulerconfig/scheduler-componentconfig.yaml"
        extraVolumes:
          - hostPath: "/etc/kubernetes/schedulerconfig"
            mountPath: "/etc/kubernetes/schedulerconfig"
            name: schedulerconfig
          - hostPath: "/etc/kubernetes/pki/ca.key"
            mountPath: "/host/certs/client.key"
            name: cacert
          - hostPath: "/etc/kubernetes/pki/ca.crt"
            mountPath: "/host/certs/client.crt"
            name: clientcert
    initConfiguration:
      patches:
        directory: /tmp/kubeadm/patches
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: gce
        name: '{{ ds.meta_data.local_hostname.split(".")[0] }}'
    joinConfiguration:
      patches:
        directory: /tmp/kubeadm/patches
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: gce
        name: '{{ ds.meta_data.local_hostname.split(".")[0] }}'
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: GCPMachineTemplate
      name: scheduling-dev-wkld-control-plane
  replicas: 1
  version: v1.25.0
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: GCPMachineTemplate
metadata:
  name: scheduling-dev-wkld-control-plane
  namespace: default
spec:
  template:
    spec:
      image: projects/k8s-ecoqube-development/global/images/cluster-api-ubuntu-2004-v1-25-0-1662644962
      instanceType: n1-standard-2
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: scheduling-dev-wkld-md-0
  namespace: default
spec:
  clusterName: scheduling-dev-wkld
  replicas: 3
  selector:
    matchLabels: null
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: scheduling-dev-wkld-md-0
      clusterName: scheduling-dev-wkld
      failureDomain: europe-west6-a
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: GCPMachineTemplate
        name: scheduling-dev-wkld-md-0
      version: v1.25.0
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: GCPMachineTemplate
metadata:
  name: scheduling-dev-wkld-md-0
  namespace: default
spec:
  template:
    spec:
      image: projects/k8s-ecoqube-development/global/images/cluster-api-ubuntu-2004-v1-25-0-1662644962
      instanceType: n1-standard-2
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: scheduling-dev-wkld-md-0
  namespace: default
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            cloud-provider: gce
          name: '{{ ds.meta_data.local_hostname.split(".")[0] }}'
--- # ConfigMaps for CRS
apiVersion: v1
data:
  prometheus.yaml: "---\nkind: Namespace\napiVersion: v1\nmetadata:\n  name: monitoring\n
    \ labels:\n    name: monitoring\n---\n# Source: prometheus_helm_chart/templates/prometheus-cluseterRole.yaml\napiVersion:
    rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: prometheus\nrules:\n-
    apiGroups: [\"\"]\n  resources:\n  - nodes\n  - nodes/proxy\n  - services\n  -
    endpoints\n  - pods\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups:\n  -
    extensions\n  resources:\n  - ingresses\n  verbs: [\"get\", \"list\", \"watch\"]\n-
    nonResourceURLs: [\"/metrics\"]\n  verbs: [\"get\"]\n---\n# Source: prometheus_helm_chart/templates/prometheus-cluseterRole.yaml\napiVersion:
    rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: prometheus\nroleRef:\n
    \ apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: prometheus\nsubjects:\n-
    kind: ServiceAccount\n  name: default\n  namespace: monitoring\n---\n# Source:
    prometheus_helm_chart/templates/prometheus-config-map.yaml\napiVersion: v1\nkind:
    ConfigMap\nmetadata:\n  name: prometheus-server-conf\n  labels:\n    name: prometheus-server-conf\n
    \ namespace: monitoring\ndata:\n  prometheus.rules: |-\n    groups:\n    - name:
    demo alert\n      rules:\n      - alert: High CPU USAGE\n        expr: sum(node_load1)
    > 2\n        for: 10s\n        labels:\n          severity: slack\n        annotations:\n
    \         summary: More than 2 cores are now in use.\n    - name: prometheus.recording.rules\n
    \     rules:\n      - record: node_cpu_utilization\n        expr: 100 - 100 *
    avg by (instance, job) (rate(node_cpu_seconds_total{mode=\"idle\"}[1m]))\n  prometheus.yml:
    |-\n    global:\n      scrape_interval: 5s\n      evaluation_interval: 5s\n    rule_files:\n
    \     - /etc/prometheus/prometheus.rules\n    alerting:\n      alertmanagers:\n
    \     - scheme: http\n        static_configs:\n        - targets:\n          -
    \"alertmanager.monitoring.svc:9093\"\n\n    scrape_configs:\n      - job_name:
    metrics-target-exporter\n        static_configs:\n          - targets:\n            -
    \"target-exporter.target-exporter.svc.cluster.local:2112\"\n      - job_name:
    'kubernetes-apiservers'\n\n        kubernetes_sd_configs:\n        - role: endpoints\n
    \       scheme: https\n\n        tls_config:\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n
    \       bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n
    \       relabel_configs:\n        - source_labels: [__meta_kubernetes_namespace,
    __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n          action:
    keep\n          regex: default;kubernetes;https\n\n      - job_name: 'kubernetes-nodes'\n\n
    \       scheme: https\n\n        tls_config:\n          insecure_skip_verify:
    true\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n
    \       bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n
    \       kubernetes_sd_configs:\n        - role: node\n\n        relabel_configs:\n
    \       - action: labelmap\n          regex: __meta_kubernetes_node_label_(.+)\n
    \       - target_label: __address__\n          replacement: kubernetes.default.svc:443\n
    \       - source_labels: [__meta_kubernetes_node_name]\n          regex: (.+)\n
    \         target_label: __metrics_path__\n          replacement: /api/v1/nodes/${1}/proxy/metrics\n
    \       - source_labels: [__meta_kubernetes_node_name]\n          action: replace\n
    \         target_label: node\n\n      - job_name: 'kubernetes-node-exporter'\n
    \       tls_config:\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n
    \         insecure_skip_verify: true\n        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n
    \       scheme: https\n        kubernetes_sd_configs:\n        - role: node\n
    \       relabel_configs:\n        - source_labels: [__address__]\n          regex:
    ^(.*):\\d+$\n          target_label: __address__\n          replacement: $1:9100\n
    \       - target_label: __scheme__\n          replacement: http\n        # Host
    name\n        \n      - job_name: 'kubernetes-pods'\n\n        kubernetes_sd_configs:\n
    \       - role: pod\n\n        relabel_configs:\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n
    \         action: keep\n          regex: true\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n
    \         action: replace\n          target_label: __metrics_path__\n          regex:
    (.+)\n        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n
    \         action: replace\n          regex: ([^:]+)(?::\\d+)?;(\\d+)\n          replacement:
    $1:$2\n          target_label: __address__\n        - action: labelmap\n          regex:
    __meta_kubernetes_pod_label_(.+)\n        - source_labels: [__meta_kubernetes_namespace]\n
    \         action: replace\n          target_label: kubernetes_namespace\n        -
    source_labels: [__meta_kubernetes_pod_name]\n          action: replace\n          target_label:
    kubernetes_pod_name\n\n      - job_name: 'kubernetes-cadvisor'\n\n        scheme:
    https\n\n        tls_config:\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n
    \       bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n
    \       kubernetes_sd_configs:\n        - role: node\n\n        relabel_configs:\n
    \       - action: labelmap\n          regex: __meta_kubernetes_node_label_(.+)\n
    \       - target_label: __address__\n          replacement: kubernetes.default.svc:443\n
    \       - source_labels: [__meta_kubernetes_node_name]\n          regex: (.+)\n
    \         target_label: __metrics_path__\n          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor\n---\n#
    Source: prometheus_helm_chart/templates/prometheus-deployment.yaml\napiVersion:
    apps/v1 \nkind: Deployment\nmetadata:\n  name: prometheus-deployment\n  namespace:
    monitoring\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: prometheus-server\n
    \ template:\n    metadata:\n      labels:\n        app: prometheus-server\n    spec:\n
    \     containers:\n        - name: prometheus\n          image: prom/prometheus:v2.2.1\n
    \         args:\n            - \"--config.file=/etc/prometheus/prometheus.yml\"\n
    \           - \"--storage.tsdb.path=/prometheus/\"\n          ports:\n            -
    containerPort: 9090\n          volumeMounts:\n            - name: prometheus-config-volume\n
    \             mountPath: /etc/prometheus/\n            - name: prometheus-storage-volume\n
    \             mountPath: /prometheus/\n      volumes:\n        - name: prometheus-config-volume\n
    \         configMap:\n            defaultMode: 420\n            name: prometheus-server-conf\n
    \ \n        - name: prometheus-storage-volume\n          emptyDir: {}\n---\n#
    Source: prometheus_helm_chart/templates/prometheus-service.yaml\napiVersion: v1\nkind:
    Service\nmetadata:\n  name: prometheus-service\n  namespace: monitoring\nspec:\n
    \ selector: \n    app: prometheus-server\n  type: NodePort  \n  ports:\n   -  targetPort:
    9090\n      port: 8080 \n      nodePort: 30000\n---\n# Source: prometheus_helm_chart/templates/prometheus-service.yaml\napiVersion:
    v1\nkind: Service\nmetadata:\n  name: prom-service\n  namespace: monitoring\n
    \ labels:\n    app: prometheus-server\n  \n  annotations:\n      prometheus.io/scrape:
    'true'\n      prometheus.io/path:   /metrics\n      prometheus.io/port:   '9090'\n\n\nspec:\n
    \ ports:\n  - port: 9090 \n    targetPort: 9090\n    protocol: TCP\n  selector:\n
    \   app: prometheus-server\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: prometheus-configmap
---
apiVersion: v1
data:
  prometheus-node-exporter.yaml: "---\n# Source: prometheus_node_exporter_helm_chart/templates/node-exporter-ds.yaml\napiVersion:
    apps/v1\nkind: DaemonSet\nmetadata:\n  name: node-exporter \n  namespace: kube-system\n
    \ labels:\n    k8s-app: node-exporter\n    kubernetes.io/cluster-service: \"true\"\n
    \   addonmanager.kubernetes.io/mode: Reconcile\n    version: v0.15.2\nspec:\n
    \ selector:\n    matchLabels:\n      k8s-app: node-exporter\n      version: v0.15.2\n
    \ updateStrategy:\n    type: OnDelete\n  template:\n    metadata:\n      labels:\n
    \       k8s-app: node-exporter\n        version: v0.15.2\n      annotations:\n
    \       scheduler.alpha.kubernetes.io/critical-pod: ''\n    spec:\n      priorityClassName:
    system-node-critical\n      containers:\n        - name: prometheus-node-exporter\n
    \         image: prom/node-exporter:latest\n          imagePullPolicy: IfNotPresent\n
    \         args:\n            - --path.procfs=/host/proc\n            - --path.sysfs=/host/sys\n
    \           - --collector.textfile.directory=/host/node-metrics\n          ports:\n
    \           - name: metrics\n              containerPort: 9100\n              hostPort:
    9100\n          volumeMounts:\n            - name: proc\n              mountPath:
    /host/proc\n              readOnly:  true\n            - name: sys\n              mountPath:
    /host/sys\n              readOnly: true\n            - name: node-metrics\n              mountPath:
    /host/node-metrics\n              readOnly: true\n      hostNetwork: true\n      hostPID:
    true\n      volumes:\n        - name: proc\n          hostPath:\n            path:
    /proc\n        - name: sys\n          hostPath:\n            path: /sys\n        -
    name: node-metrics\n          hostPath:\n            path: /tmp/node-metrics\n---\n#
    Source: prometheus_node_exporter_helm_chart/templates/node-exporter-service.yaml\napiVersion:
    v1\nkind: Service\nmetadata:\n  name: node-exporter\n  namespace: kube-system\n
    \ annotations:\n    prometheus.io/scrape: \"true\"\n  labels:\n    kubernetes.io/cluster-service:
    \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\n    kubernetes.io/name:
    \"NodeExporter\"\nspec:\n  clusterIP: None\n  ports:\n    - name: metrics\n      port:
    9100\n      protocol: TCP\n      targetPort: 9100\n  selector:\n    k8s-app: node-exporter"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: prometheus-node-exporter-configmap
---
apiVersion: v1
data:
  custom-metrics.yaml: "---\nkind: Namespace\napiVersion: v1\nmetadata:\n
    \ name: custom-metrics\n  labels:\n    name: custom-metrics\n---\n# Source: prometheus_custom_metrics_helm_chart/templates/custom-metrics-apiserver-auth-delegator-cluster-role-binding.yaml\napiVersion:
    rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: custom-metrics:system:auth-delegator\nroleRef:\n
    \ apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n-
    kind: ServiceAccount\n  name: custom-metrics-apiserver\n  namespace: custom-metrics\n---\n#
    Source: prometheus_custom_metrics_helm_chart/templates/custom-metrics-apiserver-auth-reader-role-binding.yaml\napiVersion:
    rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: custom-metrics-auth-reader
    \n  namespace: kube-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n
    \ kind: Role\n  name: extension-apiserver-authentication-reader\nsubjects:\n-
    kind: ServiceAccount\n  name: custom-metrics-apiserver\n  namespace: custom-metrics\n---\n#
    Source: prometheus_custom_metrics_helm_chart/templates/custom-metrics-apiserver-deployment.yaml\napiVersion:
    apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: custom-metrics-apiserver\n
    \ name: custom-metrics-apiserver\n  namespace: custom-metrics\nspec:\n  replicas:
    1\n  selector:\n    matchLabels:\n      app: custom-metrics-apiserver\n  template:\n
    \   metadata:\n      labels:\n        app: custom-metrics-apiserver\n      name:
    custom-metrics-apiserver\n    spec:\n      serviceAccountName: custom-metrics-apiserver\n
    \     containers:\n      - name: custom-metrics-apiserver\n        image: directxman12/k8s-prometheus-adapter-amd64\n
    \       args:\n        - --secure-port=6443\n        - --tls-cert-file=/var/run/serving-cert/tls.crt\n
    \       - --tls-private-key-file=/var/run/serving-cert/tls.key\n        - --logtostderr=true\n
    \       - --prometheus-url=http://prom-service.monitoring.svc:9090/\n        -
    --metrics-relist-interval=1m\n        - --v=10\n        - --config=/etc/adapter/config.yaml\n
    \       ports:\n        - containerPort: 6443\n        volumeMounts:\n        -
    mountPath: /var/run/serving-cert\n          name: volume-serving-cert\n          readOnly:
    true\n        - mountPath: /etc/adapter/\n          name: config\n          readOnly:
    true\n        - mountPath: /tmp\n          name: tmp-vol\n      volumes:\n      -
    name: volume-serving-cert\n        secret:\n          secretName: cm-adapter-serving-certs\n
    \     - name: config\n        configMap:\n          name: adapter-config\n      -
    name: tmp-vol\n        emptyDir: {}\n---\n# Source: prometheus_custom_metrics_helm_chart/templates/custom-metrics-apiserver-resource-reader-cluster-role-binding.yaml\napiVersion:
    rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: custom-metrics-resource-reader\nroleRef:\n
    \ apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: custom-metrics-resource-reader\nsubjects:\n-
    kind: ServiceAccount\n  name: custom-metrics-apiserver\n  namespace: custom-metrics\n---\n#
    Source: prometheus_custom_metrics_helm_chart/templates/custom-metrics-apiserver-service-account.yaml\nkind:
    ServiceAccount\napiVersion: v1\nmetadata:\n  name: custom-metrics-apiserver\n
    \ namespace: custom-metrics\n---\n# Source: prometheus_custom_metrics_helm_chart/templates/custom-metrics-apiserver-service.yaml\napiVersion:
    v1\nkind: Service\nmetadata:\n  name: custom-metrics-apiserver\n  namespace: custom-metrics\nspec:\n
    \ ports:\n  - port: 443\n    targetPort: 6443\n  selector:\n    app: custom-metrics-apiserver\n---\n#
    Source: prometheus_custom_metrics_helm_chart/templates/custom-metrics-apiservice.yaml\napiVersion:
    apiregistration.k8s.io/v1\nkind: APIService\nmetadata:\n  name: v1beta1.custom.metrics.k8s.io\nspec:\n
    \ service:\n    name: custom-metrics-apiserver\n    namespace: custom-metrics\n
    \ group: custom.metrics.k8s.io\n  version: v1beta1\n  insecureSkipTLSVerify: true\n
    \ groupPriorityMinimum: 100\n  versionPriority: 100\n---\n# Source: prometheus_custom_metrics_helm_chart/templates/custom-metrics-cluster-role.yaml\napiVersion:
    rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: custom-metrics-server-resources\nrules:\n-
    apiGroups:\n  - \"\"\n  resources: [\"*\"]\n  verbs: [\"*\"]\n---\n# Source: prometheus_custom_metrics_helm_chart/templates/custom-metrics-config-map.yaml\napiVersion:
    v1\nkind: ConfigMap\nmetadata:\n  name: adapter-config\n  namespace: custom-metrics\ndata:\n
    \ config.yaml: |\n    rules:\n    - seriesQuery: '{__name__=~\"^container_.*\",container_name!=\"POD\",namespace!=\"\",pod_name!=\"\"}'\n
    \     seriesFilters: []\n      resources:\n        overrides:\n          namespace:\n
    \           resource: namespace\n          pod_name:\n            resource: pod\n
    \     name:\n        matches: ^container_(.*)_seconds_total$\n        as: \"\"\n
    \     metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container_name!=\"POD\"}[1m]))
    by (<<.GroupBy>>)\n    - seriesQuery: '{__name__=~\"^container_.*\",container_name!=\"POD\",namespace!=\"\",pod_name!=\"\"}'\n
    \     seriesFilters:\n      - isNot: ^container_.*_seconds_total$\n      resources:\n
    \       overrides:\n          namespace:\n            resource: namespace\n          pod_name:\n
    \           resource: pod\n      name:\n        matches: ^container_(.*)_total$\n
    \       as: \"\"\n      metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container_name!=\"POD\"}[1m]))
    by (<<.GroupBy>>)\n    - seriesQuery: '{__name__=~\"^container_.*\",container_name!=\"POD\",namespace!=\"\",pod_name!=\"\"}'\n
    \     seriesFilters:\n      - isNot: ^container_.*_total$\n      resources:\n
    \       overrides:\n          namespace:\n            resource: namespace\n          pod_name:\n
    \           resource: pod\n      name:\n        matches: ^container_(.*)$\n        as:
    \"\"\n      metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>,container_name!=\"POD\"})
    by (<<.GroupBy>>)\n    - seriesQuery: '{namespace!=\"\",__name__!~\"^container_.*\"}'\n
    \     seriesFilters:\n      - isNot: .*_total$\n      resources:\n        template:
    <<.Resource>>\n      name:\n        matches: \"\"\n        as: \"\"\n      metricsQuery:
    sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)\n    - seriesQuery: '{namespace!=\"\",__name__!~\"^container_.*\"}'\n
    \     seriesFilters:\n      - isNot: .*_seconds_total\n      resources:\n        template:
    <<.Resource>>\n      name:\n        matches: ^(.*)_total$\n        as: \"\"\n
    \     metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)\n
    \   - seriesQuery: '{__name__=~\"^node_.*\"}'\n      resources:\n        overrides:\n
    \         instance:\n            resource: node\n      name:\n        matches:
    ^node_(.*)\n      metricsQuery: <<.Series>>\n    - seriesQuery: '{__name__=\"cpu_diff_target\"}'\n
    \     resources:\n        overrides:\n          instance:\n            resource:
    node\n      name:\n        matches: ^cpu_(.*)_target\n      # metricsQuery: node_cpu_diff
    - 100 + 100 * avg by (instance, job) (rate(node_cpu_seconds_total{mode=\"idle\"}[1m]))\n
    \     metricsQuery: avg by (instance) (label_replace(cpu_diff_target, \"instance\",
    \"$1\", \"exported_instance\", \"(.*)\")) - 100 + 100 * avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[1m]))\n
    \   - seriesQuery: '{namespace!=\"\",__name__!~\"^container_.*\"}'\n      seriesFilters:
    []\n      resources:\n        template: <<.Resource>>\n      name:\n        matches:
    ^(.*)_seconds_total$\n        as: \"\"\n      metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}[1m])
    by (<<.GroupBy>>)\n---\n# Source: prometheus_custom_metrics_helm_chart/templates/custom-metrics-resource-reader-cluster-role.yaml\napiVersion:
    rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: custom-metrics-resource-reader\nrules:\n-
    apiGroups:\n  - \"\"\n  resources:\n  - namespaces\n  - pods\n  - services\n  -
    nodes\n  verbs:\n  - get\n  - list\n  - watch\n---\napiVersion: v1\ndata:\n  tls.crt:
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNsakNDQVg0Q0NRRDZkSC9pQ0ZYYzZUQU5CZ2txaGtpRzl3MEJBUXNGQURBTk1Rc3dDUVlEVlFRRERBSmoKWVRBZUZ3MHlNakEyTURreE1qUTJNakJhRncweU16QTJNRGt4TWpRMk1qQmFNQTB4Q3pBSkJnTlZCQU1NQW1OaApNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXZLTHZ4R1hQVkNndFlFckJ4dHp1Cmk5M2JLTURDa25nRFVLMUpwRkRKb1FuRlFnV3REZGU3Q0ZmaXVXT3d0SmR5eWN4dVZXRlJBMEducGhaRUc3S0gKdmVwcnh6dWtjVEhUNHA5bXVUM2QzTTlKY1dQbUdueHd0NXU0Qkt1d3pySk1CbDk1L2g4NnBLL1ZDRDh0U1BHUAovaitBUUF2YzBzWFJYZEc2czJFN05KV0dIRElQVFpEQ01JVTVTMmhKRTIzUlQ5V2F6dVZ4aVJTQThRLzZMNml0CmRDdDZ2QUxqcUhCOTliRUFmQmlsMDFsb1UvYjVuZDVLZTJ6cXo0b2h1NW9pUFZlZjVUck9RT0p4RUZCb1llK08KZEFJT3U1YmdtV2VTWnJVeTRqbldaeWU2TUtacHVIeDhPZzFPTSthUTFwT3JTZUxOcS9HNVdPR0hWUlNKVlBpbApkUUlEQVFBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQjY1U29PZ3ZTVml0L1RpSFdSMUF6Y25BYklpV1hiCnl1dGxuQmh5UjdzaUwvZzEvUThUSnZVRngrbEtja1ROMGg1R3lzRHZjVkVhM2VVdWQvUUd6eGVnTEVlL1J4aEkKY3NPNGlQMDFINGl0UlVWRjB6bEZXMFdoLy80aXpEMmJjSG5HaUNnaXFZcXlzZEFvMnFBQUdid09IS0EraGtWcgo4TEM0ZW5EMS84OGFONFJiaG9XS0xMMUJEUXpvZXZMaGRDRlB4a3Rtdm5PY3F5Zm01L3BaNTFMYk81cDBWOVhtCjVrekdzaUg4Q1I2Vlc0bFhiUFZjN2tRTCs1OXJGYlV3Wml5U3VVRS9ITjdCWDNsbmtVeVM5cHNWQkZwU3dFdVcKd3RsQ2dLbzVmMW5OR3RjdU1ZUG8vaytxRXRLMHhqTS9NUTRtT3dLQ0VSc1JETEhwMFlSSDJkSlMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n
    \ tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV3QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktvd2dnU21BZ0VBQW9JQkFRQzhvdS9FWmM5VUtDMWcKU3NIRzNPNkwzZHNvd01LU2VBTlFyVW1rVU1taENjVkNCYTBOMTdzSVYrSzVZN0MwbDNMSnpHNVZZVkVEUWFlbQpGa1Fic29lOTZtdkhPNlJ4TWRQaW4yYTVQZDNjejBseFkrWWFmSEMzbTdnRXE3RE9za3dHWDNuK0h6cWtyOVVJClB5MUk4WS8rUDRCQUM5elN4ZEZkMGJxellUczBsWVljTWc5TmtNSXdoVGxMYUVrVGJkRlAxWnJPNVhHSkZJRHgKRC9vdnFLMTBLM3E4QXVPb2NIMzFzUUI4R0tYVFdXaFQ5dm1kM2twN2JPclBpaUc3bWlJOVY1L2xPczVBNG5FUQpVR2hoNzQ1MEFnNjdsdUNaWjVKbXRUTGlPZFpuSjdvd3BtbTRmSHc2RFU0ejVwRFdrNnRKNHMycjhibFk0WWRWCkZJbFUrS1YxQWdNQkFBRUNnZ0VCQUo5NUxEU2dVYWYzRTIxOXBkYW1QckZXRFFxbDg1aDZCMnQwSkhiYXFhc1EKSklpTlhlRC9DYXFqQ2hUcTk1K2xEYkVXdUF4TWFuM1RTcFU1NjdoeXRSbFVqbXR2dTdUS2lEUGx5S1ZBYlVsWQpvT0ZRc0Y2aDUzVUNHNDh2U3hsaldLeG1tUzdDWGdTT2RnNHp3dWdRK0VmY2pXTVg1RWI0WCtqdC91WFpoSUVOCmwzemVWQ0kyZDBEbkRUa2swbG0va0EwUmthOWxxMWVLL3VNN1hkQjdhYUhKWENISG8va1JaSmk1YXE0WWtmQ0IKWk5uYUZhUmgxbUszK2xaMEJxcER0aXlDYWNHazBQekphTXN3QU92NVZDTjhoY1NSbTJZVE1TY3gzcmpBQW9uNQorVnpjUGF0b000ZVRzRkVRYjZoeTB4L2cwbVJjdmQ3czBpRUZRREp5QVVFQ2dZRUE2ZFI4MTV4ZzBjVm1yNE91CkZPcEZmMTliRkZsMWlLSFZmTU9aN0o5R3MrVSt6NzMwdTN3alkrazd3T1pIdGZqMVhGL1I3UEpUdk5GdHVyOXkKYzBoWDhDdnJwWjZUM1ViS0grdzVsNk9MZDVhM2xCbVhCek9tT0crTDI5YmJJKysxNy9PeU5RaDFFTE43WVVzUApONHlseWlaaGF1VHpKVG90QjIvQk1SZHZNQ1VDZ1lFQXpvV0RTSmRzMGxQdysrRGhtdk50Qk5mU0ZkTU9lQU9FCmYydHh1NHFMd3lhV3FYUC84Z0lOMXRDZUdMY0x1VUcwUWQ2U1lmTHF0UjdvZ0M5eUdHTmhkeG9zeW5DQWpSVkYKWkYrYU5XdWMrTmRUME9FSkU1Z3I4MDgvTzREVVZaTmZpR0h3Ty8xYW9HMVNqak1BY0x2ZFN6TVRxbXJyc3JSbwpJcysrK0RDOHR4RUNnWUVBeDQyYUJYL2xlT0NZbzgwak1hSkZNVkMxc0FZd3NpdzZ2OEZHaVpQY2lRWnB0bTBNCmdUeU9EMlFxcEpOaU84QjkxUm5KVkFmeXdyK1FmOEdHOFMrYUxOT3V4YWN4MWJQbUo1dzRBbHVHV01iOVlKeisKTVIwNURBeldOUVdGKzRORnA4UTRIOTVaMmFqeThMTllCelkyL3ZBR1QyMll1L3FNRno2ZWgwRFNtU2tDZ1lFQQp1SzFoMmM4M1M5b3VmRDc3MytGZ2t0MGdDODRoZVNiRUhHR0xZY2FoOXBBU1dGUFlBNlRjbFVVV3EwazhuWnhvCndpSnpTazI4bnR5VjB0TWF0ejVma084Q01NRnI0ejJyUVBmUTRZWnE1NGMrZDJKVkNJV2lmOEJVN2pQbExPVk4KbjVyZEJmZ29TNStYSEh2MUg5cVBLRWp6aEFoNjN1SSs0U3BmUG5mdXVkRUNnWUVBblRoYTFRakpoMHM1dkJ2cQp5UVgwWThvbXFkR1QxZldLTncwQTR2MUQ2T2taYk5XRkUzRVVLRUNCUzhEaUc3Q3d6L3NHT20rc2szQU9HVURZCkE4MTd0RFZ3a2VoNEhoRFB5a1dRRVpINXBNUmNWUm5aaU1wUktmUjhGQW42U3NTdzRvWCs5Vkl5RmxBaHFPYSsKeEk2ZWJ3N2NmR01XYTRIYWZLLzluVTgxempvPQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==\nkind:
    Secret\nmetadata:\n  name: cm-adapter-serving-certs\n  namespace: custom-metrics\ntype:
    kubernetes.io/tls"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: custom-metrics-configmap
---
apiVersion: v1
data:
  extender.yaml: "---\napiVersion: v1\nkind: Service\nmetadata:\n  name: tas-service\n
    \ namespace: default\nspec:\n  selector:\n    app: tas\n  type: ClusterIP\n  ports:\n
    \   - port: 9001\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name:
    telemetry-aware-scheduling\n  namespace: default\n  labels:\n    app: tas\nspec:\n
    \ replicas: 1\n  selector:\n    matchLabels:\n      app: tas\n  template:\n    metadata:\n
    \     labels:\n        app: tas\n    spec:\n      serviceAccountName: telemetry-aware-scheduling-service-account\n
    \     containers:\n        - name: tasext\n          command:\n            - /extender\n
    \           - --syncPeriod=2s\n            - --cert=/tas/cert/tls.crt\n            -
    --key=/tas/cert/tls.key\n            - --cacert=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n
    \           - --v=2\n          image: intel/telemetry-aware-scheduling\n          imagePullPolicy:
    IfNotPresent\n          securityContext:\n            capabilities:\n              drop:\n
    \               - all\n            readOnlyRootFilesystem: true\n            runAsNonRoot:
    true\n            runAsUser: 10001\n          volumeMounts:\n            - name:
    certs\n              mountPath: /tas/cert\n          resources:\n            limits:\n
    \             memory: \"500Mi\"\n              cpu: \"500m\"\n            requests:\n
    \             memory: \"100Mi\"\n              cpu: \"100m\"\n      volumes:\n
    \       - name: certs\n          secret:\n            secretName: extender-secret\n
    \     tolerations:\n        - key: node-role.kubernetes.io/master\n          operator:
    Exists\n        - key: \"node-role.kubernetes.io/control-plane\"\n          operator:
    \"Exists\"\n          effect: \"NoSchedule\"\n      affinity:\n        nodeAffinity:\n
    \         requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n
    \             - matchExpressions:\n                  - key: node-role.kubernetes.io/control-plane\n
    \                   operator: Exists\n---\napiVersion: apiextensions.k8s.io/v1\nkind:
    CustomResourceDefinition\nmetadata:\n  name: taspolicies.telemetry.intel.com\n
    \ namespace: default\nspec:\n  group: telemetry.intel.com\n  names:\n    kind:
    TASPolicy\n    listKind: TASPolicyList\n    plural: taspolicies\n    singular:
    taspolicy\n  scope: Namespaced\n  versions:\n    - name: v1alpha1\n      served:
    true\n      storage: true\n      schema:\n        openAPIV3Schema:\n          type:
    object\n          properties:\n           apiVersion:\n             description:
    'APIVersion defines the versioned schema of this representation of an object.
    Servers should convert recognized schemas to the latest'\n             type: string\n
    \          kind:\n             description: 'Kind is a string value representing
    the REST resource this object represents. Servers may infer this from the endpoint
    the client'\n             type: string\n           metadata:\n             type:
    object\n           spec:\n             properties:\n               strategies:\n
    \                additionalProperties:\n                   properties:\n                     policyName:\n
    \                      type: string\n                     logicalOperator:\n                       type:
    string\n                       enum: [\"allOf\", \"anyOf\"]\n                     rules:\n
    \                      items:\n                         description: Set rules
    parameters per strategy\n                         properties:\n                           metricname:\n
    \                            type: string\n                           operator:\n
    \                            type: string\n                             enum:
    [\"Equals\",\"LessThan\",\"GreaterThan\"]\n                           target:\n
    \                            format: float\n                             type:
    number\n                           labels:\n                             type:
    array\n                             items:\n                               type:
    string\n                         required:\n                           - metricname\n
    \                          - operator\n                         type: object\n
    \                      type: array\n                   required:\n                     -
    rules\n                   type: object\n                 type: object\n             required:\n
    \              - strategies\n             type: object\n           status:\n             properties:\n
    \              compliance:\n                 type: string\n               message:\n
    \                type: string\n             type: object\n      subresources:\n
    \       status: {}\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n
    \ name: policy-handler\n  namespace: default\nrules:\n- apiGroups: [\"telemetry.intel.com\"]\n
    \ resources: [\"taspolicies\"]\n  verbs: [\"get\", \"watch\", \"list\", \"delete\",
    \"update\"]\n- apiGroups: [\"custom.metrics.k8s.io\"]\n  resources: [\"*\"]\n
    \ verbs: [\"get\"]\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"list\",\"watch\",\"update\"]\n-
    apiGroups: [\"\"]\n  resources: [\"nodes\"]\n  verbs: [\"get\", \"list\", \"patch\"]\n---\napiVersion:
    rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: handle-policies\n
    \ namespace: default\nsubjects:\n  - kind: ServiceAccount\n    name: telemetry-aware-scheduling-service-account\n
    \   namespace: default\nroleRef:\n  kind: ClusterRole\n  name: policy-handler\n
    \ apiGroup: rbac.authorization.k8s.io\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n
    \ name: telemetry-aware-scheduling-service-account\n  namespace: default\n---\napiVersion:
    v1\nkind: ConfigMap\nmetadata:\n  name: scheduler-extender-policy\n  namespace:
    kube-system\ndata:\n  policy.cfg: |\n    {\n        \"kind\" : \"Policy\",\n        \"apiVersion\"
    : \"v1\",\n        \"extenders\" : [\n            {\n              \"urlPrefix\":
    \"https://tas-service.default.svc.cluster.local:9001\",             \n              \"apiVersion\":
    \"v1\",\n              \"prioritizeVerb\": \"scheduler/prioritize\",\n              \"filterVerb\":
    \"scheduler/filter\",\n              \"weight\": 1,\n              \"enableHttps\":
    true,\n              \"managedResources\": [\n                   {\n                     \"name\":
    \"telemetry/scheduling\",\n                     \"ignoredByScheduler\": true\n
    \                  }\n              ],\n              \"ignorable\": true,\n              \"tlsConfig\":
    {\n                     \"insecure\": false,\n                     \"certFile\":
    \"/host/certs/client.crt\",\n                     \"keyFile\" : \"/host/certs/client.key\"\n
    \             }\n            }\n           ]\n    }\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind:
    ClusterRole\nmetadata:\n  name: configmapgetter\nrules:\n- apiGroups: [\"\"]\n
    \ resources: [\"configmaps\"]\n  verbs: [\"get\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind:
    ClusterRoleBinding\nmetadata:\n  name: scheduler-config-map\nroleRef:\n  apiGroup:
    rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: configmapgetter\nsubjects:\n-
    apiGroup: rbac.authorization.k8s.io\n  kind: User\n  name: system:kube-scheduler\n---\napiVersion:
    v1\ndata:\n  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNsakNDQVg0Q0NRRDZkSC9pQ0ZYYzZUQU5CZ2txaGtpRzl3MEJBUXNGQURBTk1Rc3dDUVlEVlFRRERBSmoKWVRBZUZ3MHlNakEyTURreE1qUTJNakJhRncweU16QTJNRGt4TWpRMk1qQmFNQTB4Q3pBSkJnTlZCQU1NQW1OaApNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXZLTHZ4R1hQVkNndFlFckJ4dHp1Cmk5M2JLTURDa25nRFVLMUpwRkRKb1FuRlFnV3REZGU3Q0ZmaXVXT3d0SmR5eWN4dVZXRlJBMEducGhaRUc3S0gKdmVwcnh6dWtjVEhUNHA5bXVUM2QzTTlKY1dQbUdueHd0NXU0Qkt1d3pySk1CbDk1L2g4NnBLL1ZDRDh0U1BHUAovaitBUUF2YzBzWFJYZEc2czJFN05KV0dIRElQVFpEQ01JVTVTMmhKRTIzUlQ5V2F6dVZ4aVJTQThRLzZMNml0CmRDdDZ2QUxqcUhCOTliRUFmQmlsMDFsb1UvYjVuZDVLZTJ6cXo0b2h1NW9pUFZlZjVUck9RT0p4RUZCb1llK08KZEFJT3U1YmdtV2VTWnJVeTRqbldaeWU2TUtacHVIeDhPZzFPTSthUTFwT3JTZUxOcS9HNVdPR0hWUlNKVlBpbApkUUlEQVFBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQjY1U29PZ3ZTVml0L1RpSFdSMUF6Y25BYklpV1hiCnl1dGxuQmh5UjdzaUwvZzEvUThUSnZVRngrbEtja1ROMGg1R3lzRHZjVkVhM2VVdWQvUUd6eGVnTEVlL1J4aEkKY3NPNGlQMDFINGl0UlVWRjB6bEZXMFdoLy80aXpEMmJjSG5HaUNnaXFZcXlzZEFvMnFBQUdid09IS0EraGtWcgo4TEM0ZW5EMS84OGFONFJiaG9XS0xMMUJEUXpvZXZMaGRDRlB4a3Rtdm5PY3F5Zm01L3BaNTFMYk81cDBWOVhtCjVrekdzaUg4Q1I2Vlc0bFhiUFZjN2tRTCs1OXJGYlV3Wml5U3VVRS9ITjdCWDNsbmtVeVM5cHNWQkZwU3dFdVcKd3RsQ2dLbzVmMW5OR3RjdU1ZUG8vaytxRXRLMHhqTS9NUTRtT3dLQ0VSc1JETEhwMFlSSDJkSlMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n
    \ tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV3QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktvd2dnU21BZ0VBQW9JQkFRQzhvdS9FWmM5VUtDMWcKU3NIRzNPNkwzZHNvd01LU2VBTlFyVW1rVU1taENjVkNCYTBOMTdzSVYrSzVZN0MwbDNMSnpHNVZZVkVEUWFlbQpGa1Fic29lOTZtdkhPNlJ4TWRQaW4yYTVQZDNjejBseFkrWWFmSEMzbTdnRXE3RE9za3dHWDNuK0h6cWtyOVVJClB5MUk4WS8rUDRCQUM5elN4ZEZkMGJxellUczBsWVljTWc5TmtNSXdoVGxMYUVrVGJkRlAxWnJPNVhHSkZJRHgKRC9vdnFLMTBLM3E4QXVPb2NIMzFzUUI4R0tYVFdXaFQ5dm1kM2twN2JPclBpaUc3bWlJOVY1L2xPczVBNG5FUQpVR2hoNzQ1MEFnNjdsdUNaWjVKbXRUTGlPZFpuSjdvd3BtbTRmSHc2RFU0ejVwRFdrNnRKNHMycjhibFk0WWRWCkZJbFUrS1YxQWdNQkFBRUNnZ0VCQUo5NUxEU2dVYWYzRTIxOXBkYW1QckZXRFFxbDg1aDZCMnQwSkhiYXFhc1EKSklpTlhlRC9DYXFqQ2hUcTk1K2xEYkVXdUF4TWFuM1RTcFU1NjdoeXRSbFVqbXR2dTdUS2lEUGx5S1ZBYlVsWQpvT0ZRc0Y2aDUzVUNHNDh2U3hsaldLeG1tUzdDWGdTT2RnNHp3dWdRK0VmY2pXTVg1RWI0WCtqdC91WFpoSUVOCmwzemVWQ0kyZDBEbkRUa2swbG0va0EwUmthOWxxMWVLL3VNN1hkQjdhYUhKWENISG8va1JaSmk1YXE0WWtmQ0IKWk5uYUZhUmgxbUszK2xaMEJxcER0aXlDYWNHazBQekphTXN3QU92NVZDTjhoY1NSbTJZVE1TY3gzcmpBQW9uNQorVnpjUGF0b000ZVRzRkVRYjZoeTB4L2cwbVJjdmQ3czBpRUZRREp5QVVFQ2dZRUE2ZFI4MTV4ZzBjVm1yNE91CkZPcEZmMTliRkZsMWlLSFZmTU9aN0o5R3MrVSt6NzMwdTN3alkrazd3T1pIdGZqMVhGL1I3UEpUdk5GdHVyOXkKYzBoWDhDdnJwWjZUM1ViS0grdzVsNk9MZDVhM2xCbVhCek9tT0crTDI5YmJJKysxNy9PeU5RaDFFTE43WVVzUApONHlseWlaaGF1VHpKVG90QjIvQk1SZHZNQ1VDZ1lFQXpvV0RTSmRzMGxQdysrRGhtdk50Qk5mU0ZkTU9lQU9FCmYydHh1NHFMd3lhV3FYUC84Z0lOMXRDZUdMY0x1VUcwUWQ2U1lmTHF0UjdvZ0M5eUdHTmhkeG9zeW5DQWpSVkYKWkYrYU5XdWMrTmRUME9FSkU1Z3I4MDgvTzREVVZaTmZpR0h3Ty8xYW9HMVNqak1BY0x2ZFN6TVRxbXJyc3JSbwpJcysrK0RDOHR4RUNnWUVBeDQyYUJYL2xlT0NZbzgwak1hSkZNVkMxc0FZd3NpdzZ2OEZHaVpQY2lRWnB0bTBNCmdUeU9EMlFxcEpOaU84QjkxUm5KVkFmeXdyK1FmOEdHOFMrYUxOT3V4YWN4MWJQbUo1dzRBbHVHV01iOVlKeisKTVIwNURBeldOUVdGKzRORnA4UTRIOTVaMmFqeThMTllCelkyL3ZBR1QyMll1L3FNRno2ZWgwRFNtU2tDZ1lFQQp1SzFoMmM4M1M5b3VmRDc3MytGZ2t0MGdDODRoZVNiRUhHR0xZY2FoOXBBU1dGUFlBNlRjbFVVV3EwazhuWnhvCndpSnpTazI4bnR5VjB0TWF0ejVma084Q01NRnI0ejJyUVBmUTRZWnE1NGMrZDJKVkNJV2lmOEJVN2pQbExPVk4KbjVyZEJmZ29TNStYSEh2MUg5cVBLRWp6aEFoNjN1SSs0U3BmUG5mdXVkRUNnWUVBblRoYTFRakpoMHM1dkJ2cQp5UVgwWThvbXFkR1QxZldLTncwQTR2MUQ2T2taYk5XRkUzRVVLRUNCUzhEaUc3Q3d6L3NHT20rc2szQU9HVURZCkE4MTd0RFZ3a2VoNEhoRFB5a1dRRVpINXBNUmNWUm5aaU1wUktmUjhGQW42U3NTdzRvWCs5Vkl5RmxBaHFPYSsKeEk2ZWJ3N2NmR01XYTRIYWZLLzluVTgxempvPQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==\nkind:
    Secret\nmetadata:\n  name: extender-secret\n  namespace: default\ntype: kubernetes.io/tls"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: scheduler-extender-configmap
--- # ClusterResourceSets
apiVersion: addons.cluster.x-k8s.io/v1alpha3
kind: ClusterResourceSet
metadata:
  name: prometheus
spec:
  clusterSelector:
    matchLabels:
      scheduler: tas
  resources:
    - kind: ConfigMap
      name: prometheus-configmap
---
apiVersion: addons.cluster.x-k8s.io/v1alpha3
kind: ClusterResourceSet
metadata:
  name: prometheus-node-exporter
spec:
  clusterSelector:
    matchLabels:
      scheduler: tas
  resources:
    - kind: ConfigMap
      name: prometheus-node-exporter-configmap
---
apiVersion: addons.cluster.x-k8s.io/v1alpha3
kind: ClusterResourceSet
metadata:
  name: custom-metrics
spec:
  clusterSelector:
    matchLabels:
      scheduler: tas
  resources:
    - kind: ConfigMap
      name: custom-metrics-configmap
---
apiVersion: addons.cluster.x-k8s.io/v1alpha3
kind: ClusterResourceSet
metadata:
  name: scheduler-extender
spec:
  clusterSelector:
    matchLabels:
      scheduler: tas
  resources:
    - kind: ConfigMap
      name: scheduler-extender-configmap
