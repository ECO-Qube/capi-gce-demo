# Load common constants
load("consts.tiltfile", 'consts')
wkld_cluster_name = consts.get("wkld_cluster_name")

# Init CAPD provider
local('clusterctl init --infrastructure docker')

# Register resources from YAMLs
k8s_yaml([
    "./templates/crs/calico-configmap.yaml",
    "./templates/crs/custom-metrics-configmap.yaml",
    "./templates/crs/custom-metrics-tls-secret-configmap.yaml",
    "./templates/crs/prometheus-configmap.yaml",
    "./templates/crs/prometheus-node-exporter-configmap.yaml",
    "./templates/crs/scheduler-extender-configmap.yaml",
    "./templates/crs/tas-configmap.yaml",
    "./templates/crs/tas-tls-secret-configmap.yaml",
    "./templates/crs/clusterresourcesets.yaml",
    "./templates/capd/clusterclass-ecoqube-dev.yaml",
    "./templates/capd/cluster-template-ecoqube-dev.yaml"
])

# Register all kinds of interest
for kind in consts.get("kinds"):
    k8s_kind(kind)

# Wait for CAPI to be ready
local_resource("wait-for-capi-control-plane-readiness",
  cmd="kubectl wait --for=condition=Ready --timeout=60s pod -l control-plane=controller-manager --all-namespaces",
)

# Register all k8s resources from CAPI
for capi in consts.get("capi_names"):
    k8s_resource(capi, labels=["capi"], pod_readiness='ignore', resource_deps=["wait-for-capi-control-plane-readiness"])


# Register all ClusterResourceSets
for crs in consts.get("crs_names"):
    k8s_resource(crs, labels=["crs"], pod_readiness='ignore', resource_deps=["wait-for-capi-control-plane-readiness"])

# Wait for Cluster to be ready
local_resource("wait-for-capi-cluster-readiness",
  cmd="kubectl wait --for=condition=Ready --timeout=5m cluster {}".format(wkld_cluster_name),
  resource_deps=["ecoqube-wkld-dev"])

# Get kubeconfig once Cluster is ready
local_resource(name="kubeconfig", cmd="clusterctl get kubeconfig {0} > {0}.kubeconfig".format(wkld_cluster_name),
  resource_deps=["wait-for-capi-cluster-readiness"])

# This is mainly for development of the development tool to avoid DockerHub rate-limiting (docker login first!), usually disabled
local_resource("load-kind-images", cmd="./hack/kind-load-images.sh", resource_deps=["wait-for-capi-cluster-readiness"])

# Wait for MachineDeployment to be ready, otherwise race condition with nodes being ready / kubectl get nodes in workload.tiltfile
local_resource("wait-for-machinedeployment-readiness",
  cmd="kubectl wait --for=condition=Ready --timeout=5m machinedeployment -l cluster.x-k8s.io/cluster-name={}".format(wkld_cluster_name),
  resource_deps=["wait-for-capi-cluster-readiness"])

local_resource("tilt-workload", serve_cmd="make tilt-workload-up", resource_deps=["wait-for-machinedeployment-readiness"])